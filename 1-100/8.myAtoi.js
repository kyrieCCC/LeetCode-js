// 8. 字符串转换整数(atoi)
// 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
// 函数 myAtoi(string s) 的算法如下：
// 读入字符串并丢弃无用的前导空格
// 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
// 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
// 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
// 如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
// 返回整数作为最终结果。
// 输入：s = "42"
// 输出：42
// 解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
// 第 1 步："42"（当前没有读入字符，因为没有前导空格）
//          ^
// 第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
//          ^
// 第 3 步："42"（读入 "42"）
//            ^
// 解析得到整数 42 。
// 由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。

var myAtoi = function(s) {
    const res = s.trim().match(/^[-|+]{0,1}[0-9]+/)
    if (res !== null) {
        if (res[0] > (Math.pow(2, 31) - 1)){
            return Math.pow(2, 31) - 1
        }
        if (res[0] < Math.pow(-2, 31)) {
            return Math.pow(-2, 31)
        }
        return res[0]
    }
    return 0
};

//击败99% mihoyo春招练习
//利用正则表达式匹配，其中trim方法是去掉字符串两边的空格，match方法用于匹配正则表达式
//匹配完后，比较数字是否超出规定的范围，超出范围则返回指定数值
//当res没有的时候返回0

const s = '42'
console.log(myAtoi(s));