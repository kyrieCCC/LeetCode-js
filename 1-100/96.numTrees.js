// 96. 不同的二叉搜索树
// 给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？
// 返回满足题意的二叉搜索树的种数。
// 输入：n = 3
// 输出：5 
var numTrees = function (n) { 
    const G = new Array(n + 1).fill(0)
    G[0] = 1, G[1] = 1
    for (let i = 2; i <= n; i++){
        for (let j = 1; j <= i; j++){
            G[i] += G[j - 1] * G[i - j]
        }
    }
    return G[n]
}
//动态规划的方法
//首先我们要明白这道题的意思其实就是当你选择到一个根节点的时候，应该把左右两边的树拿出来组合
//所以，我们这里的G[i]就等于G[j - 1](左子树的组合) * G[i - j](右子树的组合)
//两边的组合相乘就能算出我们的组合数
const n = 3
console.log(numTrees(n))