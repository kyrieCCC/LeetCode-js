// 1047. 删除字符串中的所有相邻重复项
// 给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。
// 在 S 上反复执行重复项删除操作，直到无法继续删除。
// 在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。
// 输入："abbaca"
// 输出："ca"
// 解释：
// 例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，
// 其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"

/**
 * @param {string} s
 * @return {string}
 */
var removeDuplicates = function (s) { 
    const stk = []
    for(const item of s) {
        if(stk.length && stk[stk.length - 1] === item) {
            stk.pop()
        } else {
            stk.push(item)
        }
    }
    return stk.join('')
}
// 单调栈解法
// 充分理解题意后，我们可以发现，当字符串中同时有多组相邻重复项时，我们无论是先删除哪一个，都不会影响最终的结果。
// 因此我们可以从左向右顺次处理该字符串。
// 而消除一对相邻重复项可能会导致新的相邻重复项出现，如从字符串 abba中删除 bb会导致出现新的相邻重复项 aa 出现。因此我们需要保存当前还未被删除的字符。
// 一种显而易见的数据结构呼之欲出：栈。我们只需要遍历该字符串，如果当前字符和栈顶字符相同，我们就贪心地将其消去，否则就将其入栈即可。


const s = "abbaca"
console.log(removeDuplicates(s));